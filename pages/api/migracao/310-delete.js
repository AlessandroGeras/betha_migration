const sql = require('mssql');
const dotenv = require('dotenv');
const fetch = require('node-fetch');
const fs = require('fs');

dotenv.config();

async function connectToSqlServer() {
    try {
        const server = process.env.SERVER;
        const database = process.env.DATABASE;
        const username = process.env.USERNAME_SQLSERVER;
        const password = process.env.PASSWORD;

        const config = {
            user: username,
            password: password,
            server: server,
            database: database,
            options: {
                encrypt: false
            }
        };

        const pool = await sql.connect(config);
        console.log("Conectado ao SQL Server");
        return pool;
    } catch (error) {
        console.error('Erro ao conectar ao SQL Server:', error);
        throw error;
    }
}

async function main() {
    // Lista de IDs para exclusão
    const idsParaExcluir = [
       
        15187120,15165457,15187150,15187435,15187151,15187578,15165454,15187152,15187423,15187729,15165466,15187600,15187572,15187483,15187597,15187777,15187861,15187500,15187574,15187875,15187292,15187153,15187727,15187154,15187583,15187732,15187372,15187369,15187568,15165692,15187518,15187885,15187690,15187836,15187410,15187436,15187922,15187155,15187773,15187156,15187157,15187295,15187361,15187158,15187301,15165684,15187393,15187556,15187159,15187160,15187925,15187476,15187445,15187424,15187475,15187287,15187359,15187462,15165464,15187757,15187863,15187820,1518730,15187472,15187294,15187336,15165476,15187440,15187161,15187162,15187562,15187771,15187767,15187454,15187864,1517776,15187163,15187164,15165483,15187316,15187737,15187321,15187447,15187165,15187341,15187595,15187419,15187366,15187166,15187296,15165672,15187843,15187790,15165501,15187853,15187567,15187485,15187878,15165477,15187325,1518730,15187451,15187167,15187538,15187921,15165458,15165490,15165498,15165493,15187557,15187432,15187506,15187696,1587334,15187558,15187720,15187584,15187168,15187403,15165423,15165463,15187169,15187170,15187172,15187456,15187171,15187173,15187684,15187924,15187363,15187385,15187509,15187404,15187847,15187380,15187580,15187533,15187799,1518865,15187174,15187601,15187693,15187452,15187175,15187176,15187349,15187524,15187700,15187721,15187824,15187849,1187839,15187417,15187535,15187879,15187519,15187177,15187178,15187383,15187179,15187463,15165492,15187180,1518781,15187594,15165668,15187182,15187350,15187183,15165502,15187368,15187395,15187293,15187469,15187381,15185931,1518695,15187592,15187322,15187184,15165683,15187185,15165495,15187866,15187529,15187575,15165488,15187414,15187554,1187186,15187794,15187478,15187813,15187187,15187585,15187188,15187189,15187553,15187589,15187441,15187302,1518729,15187692,15187461,15187190,15187742,15187354,15187859,15187356,15187192,15187181,15187384,15187792,15187570,1518517,15187365,15187577,15165494,15187426,15187877,15187331,15187391,15187339,15187840,15187193,15187194,15187795,1187348,15187378,15187195,15185900,15187351,15187821,15187802,15165499,15187758,15187884,15187868,15187427,1518749,15187735,15187437,15187345,15187304,15187550,15187768,15187309,15187468,15187196,15187818,15187871,15187731,1518815,15187870,15187789,15187197,15187450,15185958,15187539,15187804,15165462,15187379,15187333,15187499,15187396,1187546,15187552,15187198,15187481,15187887,15187199,15187513,15187854,15187793,15187869,15187364,15165489,1518739,15187340,15187581,15187347,15187200,15187796,15187201,15187202,15187411,15187191,15165671,15187873,15187702,1518846,15187711,15165486,15187353,15187860,15187290,15165691,15187203,15187204,15187205,15187206,15187375,15187470,1187207,15187505,15187208,15187931,15165478,15187209,15187210,15187211,15187494,15187443,15187212,15187418,1518721,15187303,15187829,15187926,15187416,15187400,15187214,15187726,15187215,15187488,15165675,15187872,15187838,1518511,15187856,15187826,15165680,15187569,15187313,15187216,15187217,15187218,15187219,15165455,15187220,15187221,1187928,15187222,15165694,15187223,15187522,15187291,15187527,15187352,15187745,15187888,15187923,15187421,1518722,15187744,15165670,15187929,15187330,15165474,15165456,15187225,15187507,15187803,15187226,15187738,15187439,1518227,15187932,15187772,15165480,15187228,15187819,15187307,15187687,15187770,15187344,15187858,15187229,15187844,1185959,15187537,15187230,15165473,15187707,15187534,15187812,15165674,15187694,15187442,15187495,15187718,1518723,15187406,15187576,15187502,15187308,15187845,15187530,15187740,15165487,15187373,15187315,15187541,15187232,1518510,15187593,15187766,15185919,15165461,15185933,15187335,15187807,15187311,15187477,15165503,15187791,15187703,1187852,15187851,15187493,15187759,15187474,15187409,15187590,15187743,15187809,15187289,15187525,15187326,1518777,15187498,16626793,15165497,15187342,15187916,15187917,15187392,15187310,15187490,15187233,15187566,15165484,1518459,15187457,15187830,15187327,15187526,15187338,15187430,15187565,15187234,15187235,15187413,15187236,15165690,1187823,15187831,15187425,15165465,15165676,15187480,15187398,15187237,15187399,15187808,15165469,15187579,1518723,15187555,15187239,15187240,15187319,15187241,15187242,15187243,15187288,15187598,15165460,15187521,15187244,1518433,15187245,15187549,15187246,15187247,15187458,15187248,15187389,15187249,15187848,15187805,15187355,15187698,1187250,15187405,15185918,15187251,15187357,15187788,15165669,15187841,15187386,15187362,15187516,15187573,1518759,15187252,15187775,15187444,15187407,15165685,15187531,15165481,15187719,15187850,15187701,15187367,15187739,1518857,15187736,15187253,15187371,15165470,15187254,15187491,15165472,15187825,15187704,15187725,15187358,15187806,1187797,15187377,15187256,15187257,15187255,15187258,15187259,15187586,15187305,15187466,15187496,15187765,1518755,15187260,15187760,15187448,15187810,15165467,15187374,15187261,15165678,15187699,15187332,15187318,15187816,1518832,15187486,15165471,15187482,15187262,15165479,15165682,15187504,15187263,15187453,15187881,15187387,15187312,1187449,15187691,15187764,15187465,15187880,15187408,15187709,15165500,15187763,15187689,15187508,15187528,1518768,15187588,15187489,15187346,15165677,15165673,15187734,15187545,15187264,15187265,15187523,15187769,15187599,1518673,15187266,15187343,15187415,15187317,15185901,15165496,15187708,15187397,15165681,15165482,15165468,15187733,1187401,15187267,15187798,15187464,15165459,15187376,15187420,15187876,15187337,15187314,15187268,15187543,1518748,15187542,15187388,15187761,15187434,15187563,15187422,15187730,15185930,15187300,15187835,15187431,15187728,1670483,15187561,15187306,15187269,15187587,16708427,15187559,15187800,15187412,15187688,15187827,15187473,15187402,1185957,15187492,15187270,15185932,15187834,15187271,15187514,15187272,15187722,15187920,15187540,15187564,1518727,15187382,15187276,15187706,15187429,15187274,15187370,15187697,15187275,15187428,15187602,15187484,15187717,1518571,15187582,15187297,15122123,15187886,15187686,15187867,15187741,15187438,15187842,15187685,15187285,15165475,1187536,15187455,15187705,15165679,15187548,15187282,15187299,15187479,15165491,15187281,15187560,15187323,1518787,15187328,15187512,15187446,15187817,15187724,15187286,15187501,15187360,15187283,15187284,15187460,15187828,1518811,15187503,15187833,15165693,15187596,15165485,15187277,15187324,15187710,15187855,15187801,15187882,15187329,1187278,15187837,15187883,15187927,15187822,15187896,15187279,15187532,15187723,15187919,15187762,15187515,1518728,15187544
    ];

    try {
        // Conectar ao SQL Server
        const masterConnection = await connectToSqlServer();

        // Selecionar o banco de dados "FOLHADB"
        const selectDatabaseQuery = 'USE FOLHADB';
        await masterConnection.query(selectDatabaseQuery);

        // Iterar sobre a lista de IDs e enviar uma solicitação de exclusão para cada um
        for (const id of idsParaExcluir) {
            const deletePayload = {
                idIntegracao: `${id}`,
                idGerado: `${id}`,
                conteudo: {                    
                    id: id
                }                
            };

            console.log(`Enviando requisição para excluir o registro com ID ${id}...`);
            console.log('Payload:', deletePayload);

            const response = await fetch('https://pessoal.betha.cloud/service-layer/v1/api/pessoa', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer 1d12dec7-0720-4b34-a2e5-649610d10806'
                },
                body: JSON.stringify(deletePayload)
            });

            if (response.ok) {
                console.log(`Registro com ID ${id} excluído com sucesso.`);
            } else {
                console.error(`Erro ao excluir o registro com ID ${id}:`, response.statusText);
                // Exibir o payload em caso de erro
                console.error('Payload enviado:', JSON.stringify(deletePayload, null, 2));
                console.error('Status code:', response.status);
                const responseBody = await response.text(); // Ler o corpo da resposta em caso de erro
                console.error('Resposta da API:', responseBody);
            }
        }

    } catch (error) {
        // Lidar com erros de conexão ou consulta aqui
        console.error('Erro durante a execução do programa:', error);
    } finally {
        // Fechar a conexão com o SQL Server
        await sql.close();
    }
}

// Chamar a função principal
main();
